openapi: 3.0.3
info:
  title: Key-Value REST API
  version: 1.0.0
  description: |-
    This Key-Value REST API offers secure and efficient data management, featuring a flexible key-value storage system that supports both simple and nested pairs. Built with Django and Django REST Framework, the API is secured using JWT authentication with RS256 encryption, ensuring privacy and data integrity. Key features include:

    - **User Authentication**: Secure JWT-based user authentication for access control.
    - **Key-Value Storage**: Flexible handling of key-value data, supporting both flat and nested structures.
    - **Cursor Pagination**: Efficiently handles large data sets, improving client performance.
    - **Database Optimization**: PostgreSQL-backed with advanced indexing for optimized querying.
    - **Comprehensive Documentation**: OpenAPI 3 schema for easy integration.
    - **Testing and Coverage**: Ensures reliability and maintainability with automated tests and coverage reports.

    Built for production, this API is well-suited for high-traffic applications requiring secure, scalable, and reliable data storage.
paths:
  /pairs/:
    get:
      operationId: pairs_list
      parameters:
      - name: cursor
        required: false
        in: query
        description: The pagination cursor value.
        schema:
          type: string
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      tags:
      - pairs
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedKeyValueList'
          description: ''
    post:
      operationId: pairs_create
      tags:
      - pairs
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KeyValue'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/KeyValue'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/KeyValue'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyValue'
          description: ''
  /pairs/{id}/:
    get:
      operationId: pairs_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - pairs
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyValue'
          description: ''
    put:
      operationId: pairs_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - pairs
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KeyValue'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/KeyValue'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/KeyValue'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyValue'
          description: ''
    patch:
      operationId: pairs_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - pairs
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedKeyValue'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedKeyValue'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedKeyValue'
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyValue'
          description: ''
    delete:
      operationId: pairs_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - pairs
      security:
      - jwtAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /users/:
    get:
      operationId: users_list
      description: |-
        API view for listing all users or creating a new user.

        This view allows admin users to list all user accounts in the system
        and to create a new user. The IsAdminUser permission ensures that only
        users with admin privileges can access this view.
      parameters:
      - name: cursor
        required: false
        in: query
        description: The pagination cursor value.
        schema:
          type: string
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      tags:
      - users
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserList'
          description: ''
    post:
      operationId: users_create
      description: |-
        API view for listing all users or creating a new user.

        This view allows admin users to list all user accounts in the system
        and to create a new user. The IsAdminUser permission ensures that only
        users with admin privileges can access this view.
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /users/{user_id}/:
    get:
      operationId: users_retrieve
      description: |-
        API view for retrieving, updating, or deleting a user.

        This view allows authenticated users to retrieve their own information,
        update their profile, or delete their account. It ensures that only the owner
        of the user instance can perform these actions through the IsOwner permission class.
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - users
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: users_update
      description: |-
        API view for retrieving, updating, or deleting a user.

        This view allows authenticated users to retrieve their own information,
        update their profile, or delete their account. It ensures that only the owner
        of the user instance can perform these actions through the IsOwner permission class.
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: users_partial_update
      description: |-
        API view for retrieving, updating, or deleting a user.

        This view allows authenticated users to retrieve their own information,
        update their profile, or delete their account. It ensures that only the owner
        of the user instance can perform these actions through the IsOwner permission class.
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUser'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    delete:
      operationId: users_destroy
      description: |-
        API view for retrieving, updating, or deleting a user.

        This view allows authenticated users to retrieve their own information,
        update their profile, or delete their account. It ensures that only the owner
        of the user instance can perform these actions through the IsOwner permission class.
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - users
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /users/register/:
    post:
      operationId: users_register_create
      description: |-
        API view for user registration.

        This view allows new users to create an account. It uses the UserSerializer
        to validate the input data and create a new user instance in the database.
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /users/token/:
    post:
      operationId: users_token_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /users/token/refresh/:
    post:
      operationId: users_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
components:
  schemas:
    KeyValue:
      type: object
      properties:
        key:
          type: string
          maxLength: 127
        value:
          nullable: true
        type:
          $ref: '#/components/schemas/TypeEnum'
        parent:
          type: integer
          nullable: true
        children:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - children
      - created_at
      - key
      - parent
    PaginatedKeyValueList:
      type: object
      required:
      - results
      properties:
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?cursor=cD00ODY%3D"
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?cursor=cj0xJnA9NDg3
        results:
          type: array
          items:
            $ref: '#/components/schemas/KeyValue'
    PaginatedUserList:
      type: object
      required:
      - results
      properties:
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?cursor=cD00ODY%3D"
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?cursor=cj0xJnA9NDg3
        results:
          type: array
          items:
            $ref: '#/components/schemas/User'
    PatchedKeyValue:
      type: object
      properties:
        key:
          type: string
          maxLength: 127
        value:
          nullable: true
        type:
          $ref: '#/components/schemas/TypeEnum'
        parent:
          type: integer
          nullable: true
        children:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
    PatchedUser:
      type: object
      properties:
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        password:
          type: string
          writeOnly: true
          maxLength: 128
        first_name:
          type: string
          maxLength: 30
        last_name:
          type: string
          maxLength: 30
        phone:
          type: string
          nullable: true
          pattern: ^09\d{9}$
          maxLength: 11
        email:
          type: string
          format: email
          maxLength: 254
        created_at:
          type: string
          format: date-time
          readOnly: true
        is_active:
          type: boolean
          readOnly: true
    TokenObtainPair:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - password
      - refresh
      - username
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
      required:
      - access
      - refresh
    TypeEnum:
      enum:
      - NESTED
      - STRING
      - NUMBER
      - BOOLEAN
      - ARRAY
      type: string
      description: |-
        * `NESTED` - Nested
        * `STRING` - String
        * `NUMBER` - Number
        * `BOOLEAN` - Boolean
        * `ARRAY` - Array
    User:
      type: object
      properties:
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        password:
          type: string
          writeOnly: true
          maxLength: 128
        first_name:
          type: string
          maxLength: 30
        last_name:
          type: string
          maxLength: 30
        phone:
          type: string
          nullable: true
          pattern: ^09\d{9}$
          maxLength: 11
        email:
          type: string
          format: email
          maxLength: 254
        created_at:
          type: string
          format: date-time
          readOnly: true
        is_active:
          type: boolean
          readOnly: true
      required:
      - created_at
      - email
      - first_name
      - is_active
      - last_name
      - password
      - username
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
